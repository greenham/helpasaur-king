name: Deploy to Production

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/greenham/helpasaur-king

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build and push helpa-base
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./lib/Dockerfile
          target: builder
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-base:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-api:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Discord Bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./discord/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-discord:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-discord:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Twitch Bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./twitch/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-twitch:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-twitch:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          target: prod
          push: true
          build-args: |
            API_HOST=${{ secrets.API_HOST }}
            TWITCH_APP_CLIENT_ID=${{ secrets.TWITCH_APP_CLIENT_ID }}
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-web:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Runner Watcher
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./runnerwatcher/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-runnerwatcher:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-runnerwatcher:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Racebot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./racebot/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-racebot:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-racebot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WS Relay
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ws-relay/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-ws-relay:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-ws-relay:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://helpasaur.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            docker-compose.prod.yml
            nginx/
            docker-entrypoint-initdb.d/

      - name: Copy files to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,docker-compose.prod.yml,nginx/,docker-entrypoint-initdb.d/"
          target: "/srv/helpa/"
          overwrite: true
          rm: false

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd /srv/helpa
            
            # Extract version from release tag for image tagging
            export VERSION="${{ github.event.release.tag_name }}"
            export VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            echo "Deploying version: $VERSION"
            
            # Ensure .env file exists
            if [ ! -f .env ]; then
              echo "ERROR: .env file not found in /srv/helpa"
              echo "Please ensure .env file with runtime variables is present on the server"
              exit 1
            fi
            
            # Pull the new images from ghcr.io
            echo "Pulling images from GitHub Container Registry..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
            
            # Start production services with version-tagged images
            echo "Starting services..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Clean up old Docker images (keep last 3 versions of each service)
            echo "Cleaning up old Docker images..."
            SERVICES="api discord twitch web runnerwatcher racebot ws-relay helpa-base"
            for SERVICE in $SERVICES; do
              if [ "$SERVICE" = "helpa-base" ]; then
                IMAGE_NAME="ghcr.io/greenham/helpasaur-king/helpa-base"
              else
                IMAGE_NAME="ghcr.io/greenham/helpasaur-king/helpa-$SERVICE"
              fi
              echo "Cleaning $IMAGE_NAME images..."
              docker images "$IMAGE_NAME" --format "{{.Tag}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | head -n -3 | while read TAG; do
                echo "Removing $IMAGE_NAME:$TAG"
                docker rmi "$IMAGE_NAME:$TAG" || true
              done
            done
            
            # Remove dangling images
            docker image prune -f
            echo "Docker cleanup complete"

  update-changelog-and-version:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update version in package.json files
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present

          # Update version in root package.json
          npm version $VERSION --no-git-tag-version --allow-same-version

          # Define services list locally since env vars don't persist across steps
          SERVICES="api discord twitch web runnerwatcher racebot ws-relay"

          # Update version in all service package.json files
          for SERVICE_DIR in $SERVICES; do
            if [ -f "$SERVICE_DIR/package.json" ]; then
              echo "Updating version in $SERVICE_DIR/package.json"
              cd "$SERVICE_DIR"
              npm version $VERSION --no-git-tag-version --allow-same-version
              cd ..
            fi
          done

      - name: Generate Changelog Entry
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          RELEASE_NOTES="${{ github.event.release.body }}"

          # Create a temporary file with the new changelog entry
          echo "# Helpasaur King Changelog" > CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md

          # Add the new version section
          echo "## $VERSION" >> CHANGELOG.tmp.md

          # Process release notes to clean up GitHub's formatting
          PROCESSED_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^### /#### /g' | sed 's/^## /### /g' | sed 's/^# /## /g')

          echo "_${RELEASE_DATE}_" >> CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md
          echo "$PROCESSED_NOTES" >> CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md

          # Append existing changelog content (skip the first two lines - title and empty line)
          tail -n +3 CHANGELOG.md >> CHANGELOG.tmp.md

          # Replace the original file
          mv CHANGELOG.tmp.md CHANGELOG.md

          echo "Updated CHANGELOG.md with version $VERSION"

      - name: Commit and push changes
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"

          # Add all modified package.json files and the changelog
          git add package.json CHANGELOG.md

          # Add all service package.json files
          for SERVICE_DIR in ${{ env.SERVICES }}; do
            git add "$SERVICE_DIR/package.json" 2>/dev/null || true
          done

          git commit -m "chore: update version to $VERSION and changelog [skip ci]" || echo "No changes to commit"
          git push origin main