name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Image tag to deploy - must exist in ghcr.io (e.g., 1.9.1, latest)"
        required: true
        default: "latest"
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            docker-compose.ghcr.yml
            docker-compose.prod.yml
            docker-compose.monitoring.yml
            nginx/
            mongo-backup
            renew-certs
            scripts/monitoring.sh

      - name: Copy files to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,docker-compose.ghcr.yml,docker-compose.prod.yml,docker-compose.monitoring.yml,nginx/,mongo-backup,renew-certs,scripts/monitoring.sh"
          target: "${{ secrets.DEPLOY_PATH }}"
          overwrite: true
          rm: false

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Use the version from workflow input
            export VERSION="${{ github.event.inputs.version }}"
            export VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            echo "Deploying version: $VERSION"

            # Ensure .env file exists
            if [ ! -f .env ]; then
              echo "ERROR: .env file not found in ${{ secrets.DEPLOY_PATH }}"
              echo "Please ensure .env file with runtime variables is present on the server"
              exit 1
            fi

            # Pull the new images from ghcr.io
            echo "Pulling images from GitHub Container Registry..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.ghcr.yml -f docker-compose.prod.yml pull

            # Start production services with version-tagged images
            echo "Starting services with --force-recreate to ensure new images are used..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.ghcr.yml -f docker-compose.prod.yml up -d --force-recreate
            
            # Ensure monitoring stack is running (independent of app version)
            echo "Checking monitoring stack..."
            if ! docker compose -f docker-compose.monitoring.yml ps | grep -q "uptime-kuma.*Up"; then
              echo "Starting monitoring stack..."
              docker compose -f docker-compose.monitoring.yml up -d
            else
              echo "Monitoring stack is already running"
            fi

            # Clean up old Docker images (keep last 3 versions of each service)
            echo "Cleaning up old Docker images..."
            SERVICES="api discord twitch runnerwatcher racebot ws-relay base"
            for SERVICE in $SERVICES; do
              IMAGE_NAME="ghcr.io/greenham/helpasaur-king/helpa-$SERVICE"
              echo "Cleaning $IMAGE_NAME images..."
              docker images "$IMAGE_NAME" --format "{{.Tag}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | head -n -3 | while read TAG; do
                echo "Removing $IMAGE_NAME:$TAG"
                docker rmi "$IMAGE_NAME:$TAG" || true
              done
            done

            # Remove dangling images
            docker image prune -f
            echo "Docker cleanup complete"

  deploy-web:
    needs: deploy  # Wait for backend deployment to complete successfully
    uses: ./.github/workflows/deploy-gh-pages.yml
    with:
      custom_domain: helpasaur.com
    secrets: inherit
