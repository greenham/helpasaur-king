name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g., 1.9.1 or latest)"
        required: true
        default: "latest"
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/greenham/helpasaur-king

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build and push helpa-base
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./lib/Dockerfile
          target: builder
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-base:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-api:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Discord Bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./discord/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-discord:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-discord:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Twitch Bot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./twitch/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-twitch:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-twitch:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./web/Dockerfile
          target: prod
          push: true
          build-args: |
            API_HOST=${{ secrets.API_HOST }}
            TWITCH_APP_CLIENT_ID=${{ secrets.TWITCH_APP_CLIENT_ID }}
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-web:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Runner Watcher
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./runnerwatcher/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-runnerwatcher:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-runnerwatcher:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Racebot
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./racebot/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-racebot:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-racebot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WS Relay
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ws-relay/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/helpa-ws-relay:${{ steps.version.outputs.VERSION }}
            ${{ env.IMAGE_PREFIX }}/helpa-ws-relay:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            docker-compose.prod.yml
            nginx/
            mongo-backup
            renew-certs

      - name: Copy files to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.yml,docker-compose.prod.yml,nginx/,mongo-backup,renew-certs"
          target: "${{ secrets.DEPLOY_PATH }}"
          overwrite: true
          rm: false

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Use the version from workflow input
            export VERSION="${{ github.event.inputs.version }}"
            export VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            echo "Deploying version: $VERSION"

            # Ensure .env file exists
            if [ ! -f .env ]; then
              echo "ERROR: .env file not found in ${{ secrets.DEPLOY_PATH }}"
              echo "Please ensure .env file with runtime variables is present on the server"
              exit 1
            fi

            # Pull the new images from ghcr.io
            echo "Pulling images from GitHub Container Registry..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.prod.yml pull

            # Start production services with version-tagged images
            echo "Starting services..."
            VERSION=$VERSION docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

            # Clean up old Docker images (keep last 3 versions of each service)
            echo "Cleaning up old Docker images..."
            SERVICES="api discord twitch web runnerwatcher racebot ws-relay base"
            for SERVICE in $SERVICES; do
              IMAGE_NAME="ghcr.io/greenham/helpasaur-king/helpa-$SERVICE"
              echo "Cleaning $IMAGE_NAME images..."
              docker images "$IMAGE_NAME" --format "{{.Tag}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | head -n -3 | while read TAG; do
                echo "Removing $IMAGE_NAME:$TAG"
                docker rmi "$IMAGE_NAME:$TAG" || true
              done
            done

            # Remove dangling images
            docker image prune -f
            echo "Docker cleanup complete"
