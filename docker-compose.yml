version: "3.8"
name: "helpa"

services:
  helpa-base:
    build:
      context: ./lib
      target: builder
    image: helpa-base:latest

  mongo:
    image: mongo:7-jammy
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "20m"
        max-file: "5"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE_NAME}
    ports:
      - ${MONGO_EXTERNAL_PORT}:27017
    volumes:
      - ./docker-entrypoint-initdb.d/db-init.js:/docker-entrypoint-initdb.d/db-init.js:ro
      - mongodb_data_container:/data/db
    networks:
      - int
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${MONGO_EXPRESS_PORT:-8081}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017
      ME_CONFIG_BASICAUTH: "true"
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --spider http://localhost:8081 2>&1 | grep -q '401 Unauthorized' && exit 0 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  api-server:
    image: helpa-api:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./api/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${API_SERVER_EXTERNAL_PORT}:3001
    environment:
      SERVICE_NAME: api
      ALLOWED_SERVICES: discord,twitch,runnerwatcher,racebot,ws-relay,streamAlerts
      MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/${MONGO_DATABASE_NAME}?authSource=admin
      PORT: ${API_SERVER_EXTERNAL_PORT}
      API_KEY: ${API_SECRET_KEY}
      API_CORS_ORIGINS_WHITELIST: ${API_CORS_ORIGINS_WHITELIST}
      TWITCH_EVENTSUB_SECRET_KEY: ${TWITCH_EVENTSUB_SECRET_KEY}
      TWITCH_EVENTSUB_WEBHOOK_URL: ${TWITCH_EVENTSUB_WEBHOOK_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_HEADER_COOKIE_NAME: ${JWT_HEADER_COOKIE_NAME}
      JWT_FOOTER_COOKIE_NAME: ${JWT_FOOTER_COOKIE_NAME}
      API_HOST: ${API_HOST}
      CLIENT_POST_AUTH_REDIRECT_URL: ${CLIENT_POST_AUTH_REDIRECT_URL}
      WEBSOCKET_RELAY_SERVER: http://ws-relay:${WEBSOCKET_RELAY_SERVER_PORT}
    depends_on:
      mongo:
        condition: service_healthy
      ws-relay:
        condition: service_healthy
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${API_SERVER_EXTERNAL_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  discord-bot:
    image: helpa-discord:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./discord/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${DISCORD_HEALTH_PORT}:${DISCORD_HEALTH_PORT}
    environment:
      SERVICE_NAME: discord
      API_HOST: http://api-server:${API_SERVER_EXTERNAL_PORT}
      API_KEY: ${API_SECRET_KEY}
      WEBSOCKET_RELAY_SERVER: http://ws-relay:${WEBSOCKET_RELAY_SERVER_PORT}
      DISCORD_HEALTH_PORT: ${DISCORD_HEALTH_PORT}
    depends_on:
      api-server:
        condition: service_healthy
      helpa-base:
        condition: service_completed_successfully
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${DISCORD_HEALTH_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  twitch-bot:
    image: helpa-twitch:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./twitch/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${TWITCH_HEALTH_PORT}:${TWITCH_HEALTH_PORT}
    environment:
      SERVICE_NAME: twitch
      API_HOST: http://api-server:${API_SERVER_EXTERNAL_PORT}
      API_KEY: ${API_SECRET_KEY}
      WEBSOCKET_RELAY_SERVER: http://ws-relay:${WEBSOCKET_RELAY_SERVER_PORT}
      TWITCH_HEALTH_PORT: ${TWITCH_HEALTH_PORT}
    depends_on:
      api-server:
        condition: service_healthy
      helpa-base:
        condition: service_completed_successfully
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${TWITCH_HEALTH_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:1.21.6
    restart: always
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - 8888:80
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/static:/srv/static
    depends_on:
      api-server:
        condition: service_healthy
    networks:
      - int
      - ext
    extra_hosts:
      # This allows nginx to connect to the host machine on Linux
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  runnerwatcher:
    image: helpa-runnerwatcher:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./runnerwatcher/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${TWITCH_WEBHOOK_LISTENER_PORT}:3002
    environment:
      SERVICE_NAME: streamAlerts
      API_HOST: http://api-server:${API_SERVER_EXTERNAL_PORT}
      API_KEY: ${API_SECRET_KEY}
      TWITCH_EVENTSUB_SECRET_KEY: ${TWITCH_EVENTSUB_SECRET_KEY}
      TWITCH_EVENTSUB_WEBHOOK_URL: ${TWITCH_EVENTSUB_WEBHOOK_URL}
      TWITCH_WEBHOOK_LISTENER_PORT: ${TWITCH_WEBHOOK_LISTENER_PORT}
      WEBSOCKET_RELAY_SERVER: http://ws-relay:${WEBSOCKET_RELAY_SERVER_PORT}
    depends_on:
      api-server:
        condition: service_healthy
      ws-relay:
        condition: service_healthy
      helpa-base:
        condition: service_completed_successfully
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${TWITCH_WEBHOOK_LISTENER_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  racebot:
    image: helpa-racebot:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./racebot/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${RACEBOT_HEALTH_PORT}:${RACEBOT_HEALTH_PORT}
    environment:
      SERVICE_NAME: racebot
      WEBSOCKET_RELAY_SERVER: http://ws-relay:${WEBSOCKET_RELAY_SERVER_PORT}
      RACETIME_BASE_URL: ${RACETIME_BASE_URL}
      RACETIME_HOSTNAME: ${RACETIME_HOSTNAME}
      RACETIME_WSS_URL: ${RACETIME_WSS_URL}
      RACETIME_GAME_CATEGORY_SLUG_Z3: ${RACETIME_GAME_CATEGORY_SLUG_Z3}
      RACETIME_BOT_CLIENT_ID: ${RACETIME_BOT_CLIENT_ID}
      RACETIME_BOT_CLIENT_SECRET: ${RACETIME_BOT_CLIENT_SECRET}
      RACEBOT_HEALTH_PORT: ${RACEBOT_HEALTH_PORT}
    depends_on:
      ws-relay:
        condition: service_healthy
    networks:
      - int
      - ext
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${RACEBOT_HEALTH_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ws-relay:
    image: helpa-ws-relay:${VERSION:-${BUILD_TARGET}}
    build:
      context: .
      dockerfile: ./ws-relay/Dockerfile
      target: ${BUILD_TARGET}
    restart: on-failure
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - ${WEBSOCKET_RELAY_SERVER_PORT}:${WEBSOCKET_RELAY_SERVER_PORT}
      - ${WS_RELAY_HEALTH_PORT}:${WS_RELAY_HEALTH_PORT}
    environment:
      SERVICE_NAME: ws-relay
      WEBSOCKET_RELAY_SERVER_PORT: ${WEBSOCKET_RELAY_SERVER_PORT}
      WS_RELAY_HEALTH_PORT: ${WS_RELAY_HEALTH_PORT}
    networks:
      - int
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${WS_RELAY_HEALTH_PORT:-${WEBSOCKET_RELAY_SERVER_PORT}}/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data_container:

networks:
  ext:
    driver: bridge
  int:
    driver: bridge
    internal: true
